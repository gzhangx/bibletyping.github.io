{"version":3,"sources":["components/keyHandler.js","components/handleTyppingState.js","components/getVerses.js","login.js","util.js","App.js","serviceWorker.js","index.js"],"names":["KeyHandler","cb","useState","keyPressed","setKeyPressed","useEffect","onKeyDown","e","key","ctrlKey","metaKey","keyCode","preventDefault","window","addEventListener","removeEventListener","letterMatch","getInitState","curText","badText","toText","wordEnds","nextCharPos","startTime","wordCount","wordCountChangeTime","Date","count","allDone","getRandomNumber","max","min","parseInt","Math","random","props","clientId","redirectUri","authCallback","err","data","console","log","authResponseWithAccessToken","account","userName","name","info","opt","setCookie","JSON","stringify","setLoginInfo","timerCb","setTimeout","wpmTim","App","useReducer","state","action","dispatch","wpm","setWpm","elaspedTime","setElaspedTime","str","getCookie","parse","getLogin","loginInfo","errorText","setErrorText","infoText","setInfoText","verseCount","setVerseCount","needSaveStats","setNeedSaveStats","saveStatsToSheet","elasptedTime","now","getTime","parseFloat","toFixed","request","post","send","Object","assign","then","sret","body","ok","subject","text","catch","message","saveStatsToSheetAndHandleError","a","doneCb","slice","keyHandler","length","pop","position","push","toString","match","doStateHandling","started","className","style","onClick","from","verses","map","s","replace","getVerses","join","color","href","reduce","acc","c","j","ret","textDecorationLine","type","value","onChange","target","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.a4d8577c.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\r\nconst KeyHandler = cb => {\r\n    const [keyPressed, setKeyPressed] = useState();\r\n    useEffect(() => {\r\n      const onKeyDown = e => {\r\n        const { key } = e;\r\n        if ((e.ctrlKey || e.metaKey) && e.keyCode === 70) {         \r\n          e.preventDefault();\r\n        }\r\n          if (key === 'Backspace' || key === 'Control') e.preventDefault();\r\n          setKeyPressed(key);\r\n          if (cb) cb(key);\r\n      };\r\n      window.addEventListener('keydown', onKeyDown);\r\n  \r\n      return () => {\r\n        window.removeEventListener('keydown', onKeyDown);\r\n      };\r\n    });\r\n    return keyPressed;\r\n  };\r\n  \r\n  export default KeyHandler;","import keyHandler from './keyHandler';\r\nconst letterMatch = /^[A-Za-z0-9]$/;\r\n\r\nexport function doStateHandling(state, dispatch, doneCb) {\r\n    let nextCharPos = state.nextCharPos;\r\n  let wordCount = state.wordCount;  \r\n  let count = state.count;\r\n  let allDone = state.allDone;\r\n  const curText = state.curText.slice();\r\n  const badText = state.badText.slice();\r\n  const wordEnds = state.wordEnds;\r\n  let wordCountChangeTime = state.wordCountChangeTime;\r\n  keyHandler(key => { \r\n    if (nextCharPos >= state.toText.length) return;\r\n    if (key ==='Backspace') {\r\n      if (nextCharPos=== curText.length) {\r\n        if (nextCharPos > 0) nextCharPos--;\r\n      }\r\n      curText.pop();\r\n      badText.pop();\r\n      \r\n      while (wordEnds.length) {\r\n        if (wordEnds[wordEnds.length - 1].position >= nextCharPos) {\r\n          wordEnds.pop();\r\n        }\r\n        else \r\n          break;\r\n      }\r\n      if (wordCount !== wordEnds.length) {\r\n        wordCountChangeTime = new Date();\r\n      }\r\n      wordCount = wordEnds.length;\r\n      count = count+1;\r\n    }else {\r\n      if (key.length > 1)return;\r\n      if (nextCharPos < state.toText.length) {\r\n        if (key === state.toText[nextCharPos] && nextCharPos=== curText.length) {\r\n          nextCharPos++;\r\n        } else {\r\n          badText.push(key);\r\n        }\r\n        \r\n        if (key.toString().match(letterMatch) && nextCharPos > 0) {\r\n          if (nextCharPos >= state.toText.length || !state.toText[nextCharPos].match(letterMatch)) {\r\n            wordEnds.push({\r\n              count: wordCount,\r\n              position: nextCharPos - 1,\r\n            });\r\n            if (wordCount !== wordEnds.length) {\r\n              wordCountChangeTime = new Date();\r\n            }\r\n            wordCount = wordEnds.length;\r\n          }\r\n        }\r\n        \r\n      }\r\n      if (nextCharPos >= state.toText.length) {\r\n        allDone = true;\r\n        if (doneCb) doneCb();\r\n      }\r\n      curText.push(key);\r\n      count = count+1;\r\n    }\r\n    dispatch(state=>{     \r\n      return ({\r\n        ...state,\r\n        nextCharPos,\r\n        startTime: nextCharPos === 1 ? new Date() : state.startTime,\r\n        curText,\r\n        badText,\r\n        wordCount,\r\n        wordCountChangeTime,\r\n        count,\r\n        allDone,\r\n      });\r\n    });    \r\n  });  \r\n}\r\n\r\nexport function getInitState() {\r\n    return {\r\n      curText: [],\r\n      badText: [],\r\n      toText:[],\r\n      wordEnds: [],\r\n      nextCharPos: 0,\r\n      startTime: null,\r\n      wordCount: 0,\r\n      wordCountChangeTime: new Date(),\r\n      count : 0,\r\n      allDone: false,\r\n    }\r\n  }\r\n\r\n","import verses from './verses.json';\r\n\r\nfunction getRandomNumber(max, min=0) {\r\n    return parseInt((Math.random() * (max - min)) + min);\r\n}\r\nexport default function getVerses(max=3) {\r\n    let from = getRandomNumber(verses.length-max);\r\n    return verses.slice(from, from + max).map(s => s.replace(/’/g, '\\'').replace(/”/g, '\"').replace(/[^ -~]+/g, ''));\r\n}","import React from \"react\";\r\nimport MicrosoftLogin from \"react-microsoft-login\";\r\nimport { saveLogin} from './util';\r\nconst redirectUri = \"http://localhost:3000/\";\r\nconst redirectUriP = 'https://gzhangx.github.io/bibletyping.github.io/';\r\n//import { UserAgentApplication } from \"msal\";\r\nexport default (props) => {\r\n    const authHandler = (err, data) => {\r\n        console.log(err, data);\r\n        if (!err) {\r\n            console.log(data.authResponseWithAccessToken.account);\r\n            const { userName, name } = data.authResponseWithAccessToken.account;\r\n            console.log(`username=${userName} name=${name}`);\r\n            const info = {\r\n                userName,\r\n                name,\r\n            };\r\n            saveLogin(info);\r\n            props.setLoginInfo(info);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <MicrosoftLogin clientId={\"b6ff1150-a1cd-4040-bc6e-4f43340a8f4d\"}  redirectUri={redirectUriP} authCallback={authHandler} />\r\n    );\r\n};","import { getCookie, setCookie } from 'react-use-cookie';\r\n\r\n\r\nconst loginCookieName = 'ggFunTyping';\r\n\r\nexport function getLogin() {\r\n    const str = getCookie(loginCookieName);\r\n    if (str) {\r\n        return JSON.parse(str);\r\n    }\r\n}\r\n\r\nexport function saveLogin(opt) {\r\n    if (opt) {\r\n        setCookie(loginCookieName, JSON.stringify(opt));\r\n    }\r\n}","import React , { useReducer, useState } from 'react';\r\nimport './App.css';\r\nimport request from 'superagent';\r\n\r\nimport {getInitState, doStateHandling} from './components/handleTyppingState';\r\nimport getVerses from './components/getVerses';\r\nimport Login from './login';\r\nimport { getLogin } from './util';\r\n\r\nconst timerCb = {\r\n  cb : null,\r\n}\r\nconst wpmTim = ()=>{\r\n  if (timerCb.cb) timerCb.cb();\r\n  setTimeout(wpmTim, 200);\r\n};\r\nsetTimeout(wpmTim, 100);\r\n\r\nfunction App() {\r\n  const [state, dispatch] = useReducer((state,action)=>action(state), getInitState());  \r\n  const {count, allDone} = state;\r\n  const [wpm, setWpm] = useState(0);\r\n  const [elaspedTime, setElaspedTime] = useState(0);\r\n  const [loginInfo, setLoginInfo] = useState(getLogin() || {});\r\n  const [errorText, setErrorText] = useState();\r\n  const [infoText, setInfoText] = useState();\r\n  const [verseCount, setVerseCount] = useState(10);\r\n\r\n  const [needSaveStats, setNeedSaveStats] = useState(false);\r\n  \r\n  //const wpm = state.wordCount === 0 ? 0 : state.wordCount/(state.wordCountChangeTime.getTime() - state.startTime.getTime())*1000*60;  \r\n  const saveStatsToSheet = () => {\r\n    if (loginInfo && loginInfo.name) {\r\n      const elasptedTime = Date.now() - state.startTime.getTime();\r\n      const wpm = parseFloat((state.wordCount / (elasptedTime) * 1000 * 60).toFixed(2));\r\n      setInfoText('Saving your stats .....');\r\n      return request.post('https://hebrewssender.azurewebsites.net/saveFunTypingRecord').send(\r\n        Object.assign({}, loginInfo, { wpm, wordCount: state.wordCount, verseCount })\r\n      ).then(sret => {\r\n        console.log(sret);\r\n        if (!sret.body && !sret.body.ok) {\r\n          setInfoText('Error saving status, please check ');\r\n          return false;\r\n        } else {\r\n          setInfoText('Sending email');\r\n          return request.post('https://hebrewssender.azurewebsites.net/sendGJEmails').send({\r\n            subject: `FunTyping Result: ${loginInfo.name} verses=${verseCount} WPM=${wpm}`,\r\n            text: `${loginInfo.name} WPM=${wpm}\r\n\r\n            username: ${loginInfo.userName}\r\n            verses: ${verseCount}\r\n            words: ${state.wordCount}\r\n            seconds: ${(elaspedTime / 1000).toFixed(2)}\r\n            sheet: https://docs.google.com/spreadsheets/d/1fcSgz1vEh5I3NS5VXCx1BHitD_AAQrmUCXNJPPSyDYk\r\n            `\r\n          }).then(() => {\r\n            setInfoText('States saved and emailed');\r\n            return true;\r\n          })\r\n        }\r\n      }).catch(err => {\r\n        setInfoText('');\r\n        console.log(err);\r\n        setErrorText(err.message);\r\n        return false;\r\n      });\r\n    }\r\n    return true;\r\n  }\r\n\r\n  const saveStatsToSheetAndHandleError = async () => {\r\n    const res = await saveStatsToSheet();\r\n    if (!res) {\r\n      setNeedSaveStats(true);\r\n    }\r\n  }\r\n  doStateHandling(state, dispatch, saveStatsToSheetAndHandleError);\r\n\r\n  timerCb.cb = () => {\r\n    if (state.startTime) {\r\n      const elasptedTime = Date.now() - state.startTime.getTime();\r\n      if (state.wordCount > 0 && elasptedTime > 1000) {\r\n        if (!state.allDone)\r\n          setWpm(state.wordCount / (elasptedTime)*1000*60);    \r\n      }\r\n    \r\n      if (!state.allDone)\r\n        setElaspedTime(elasptedTime);\r\n    }else setElaspedTime(0);\r\n  }\r\n\r\n  const started = count > 0;\r\n  const initButtonStyle = {};  \r\n\r\n  \r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">    \r\n        {!loginInfo.name && <Login setLoginInfo={setLoginInfo}/>}\r\n        {loginInfo.name && <span>Welcome {loginInfo.name}</span>}\r\n      {(!started || allDone)?\r\n      <button  style={initButtonStyle} onClick={()=>{\r\n        console.log('========================= INIT ===========================');\r\n        //const verses = request.get('https://bible-api.com/romans%202').then(res=>{\r\n        //  return res.body.verses.map(r=>r.text.trim().replace(/“/g,'\"').replace(/’/g,'\\''));\r\n        // }).then(r=>{\r\n        //  console.log(r);\r\n        //})\r\n            setInfoText('');\r\n            setErrorText('');\r\n            const str = getVerses(parseInt(verseCount)).join(' ');\r\n        //const str = 'The quick brown fox jump over the something something new; and let\\'s play somethig cool!';\r\n        dispatch(state=>({\r\n          ...getInitState(),\r\n          toText: [...str],\r\n        }));        \r\n      }}>Start Test</button>    :null\r\n    }\r\n        {\r\n          errorText && <span style={{ color: 'red' }}>{errorText}</span>\r\n        }\r\n        {\r\n          infoText && <div>\r\n            <span> {infoText}</span>\r\n            <a href='https://docs.google.com/spreadsheets/d/1fcSgz1vEh5I3NS5VXCx1BHitD_AAQrmUCXNJPPSyDYk'>Records</a>   \r\n          </div>\r\n        }        \r\n        {\r\n          needSaveStats && <button onClick={saveStatsToSheetAndHandleError}>Save</button>\r\n        }\r\n        <p>Words: {state.wordCount}  WPM: {wpm.toFixed(2)} Seconds: { (elaspedTime/1000).toFixed(1)}</p>\r\n        <p>\r\n          {\r\n            state.toText.reduce((acc, c, j) => {\r\n              const ret = <span key={j} style={{ color: j >= state.nextCharPos ? 'yellow' : 'black', textDecorationLine: j >= state.nextCharPos ? '' : 'line-through' }}>{c}</span>\r\n              if (j === state.nextCharPos && state.badText.length) {\r\n                acc.push(<span key={j + \"bad\"} style={{ color: 'red', textDecorationLine: 'line-through' }}>{state.badText.map(c => c === ' ' ?'\\u00a0':c).join('')}</span>)\r\n              }\r\n              acc.push(ret);\r\n              return acc;\r\n            },[])\r\n        }\r\n        </p>        \r\n        <div>        \r\n          <input type='text' text={state.curText.join('')}></input>\r\n          <div>verses:</div> <input type='text' value={verseCount} onChange={e => {\r\n            setVerseCount(e.target.value);\r\n          }}></input>\r\n        {\r\n          false && state.curText.map((c,i)=><span key={i}>\r\n            {c}\r\n          </span>\r\n            \r\n          )\r\n        }\r\n      </div>\r\n      </header>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}